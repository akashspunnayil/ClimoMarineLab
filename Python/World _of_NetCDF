NetCDF has remained a preferred data storage format since the 1990s and continues to be widely used. Its introduction marked a significant scientific advancement due to its ability to store multi-dimensional arrays of diverse datasets within a single file. NetCDF, short for Network Common Data Form, comprises a set of software libraries and self-describing, machine-independent data formats designed to facilitate the creation, access, and sharing of array-oriented scientific data. The project's official homepage is maintained by the Unidata program at the University Corporation for Atmospheric Research (UCAR), serving as the primary source for netCDF software, standards development, updates, and related resources. This format is recognized as an open standard, with NetCDF Classic and 64-bit Offset Format holding international standard status within the Open Geospatial Consortium. NetCDF finds widespread use in fields such as climatology, meteorology, oceanography (including applications like weather forecasting and climate change analysis), as well as in various GIS applications. It serves as an essential input/output format for numerous GIS tools and is a common choice for the exchange of scientific data.

You can find additional information about NetCDF on its Wikipedia page: [NetCDF Wikipedia Page](https://en.wikipedia.org/wiki/NetCDF).

Now, let's delve into the management, processing, extraction, and visualization of data from NetCDF format using Python.

First and foremost, it is crucial to approach the handling of any research data, especially in the NetCDF format, with the utmost care. Researchers should adopt a practice of thoroughly acquainting themselves with the data before commencing the analysis. This precautionary step is essential because NetCDF data structures can vary significantly, and there are instances where the NetCDF format itself may exhibit anomalies, resulting in data that is poorly formatted or arranged in a manner that defies logic. Therefore, a mindful and cautious approach is necessary when dealing with any data in this format.

Python offers several powerful packages for loading and managing NetCDF format data. Notable libraries include `netCDF4`, which provides efficient access and manipulation of NetCDF files, and `xarray`, which simplifies the handling of multi-dimensional arrays, making it particularly useful for scientific datasets. Additionally, `h5netcdf` and `pydap` are valuable for accessing remote NetCDF data. These packages empower researchers and data scientists to load, analyze, and visualize complex scientific data stored in the NetCDF format, enhancing their capabilities in fields such as climate science, meteorology, and oceanography, among others.


Data for this tutorial can download from here: <LINK>
The data is global SST from NOAA ERSST version 5 and detailed decription of data can be found in: https://psl.noaa.gov/data/gridded/data.noaa.ersst.v5.html

We will be using Jupyter Notebooks to processes the data and visualisation. In the introductory class <LINK> you have learned to install JupyterLab and 'pip' to install pacakges in python. 












Cheers!

Happy coding!

Subscribe, share and comment.

Stay tuned for more classes.

